using AbstractMqHelp;
using Demo;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using ProtoBuf;
using RabbitMqHelp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace TestRabbitMq
{
    public class MianController
    {
        private IServiceCollection _services;
        private IServiceProvider _serviceProvider;
        private IBar _bar;
        private IS _s;
        public MianController()
        {

        }
        public MianController(IBar bar,IS s)
        {
            //_services = services;
            //_serviceProvider = _services.BuildServiceProvider();
            _bar = bar;
            _s = s;
        }

        public void ActionOne()
        {
            _bar.MethodOne();
            _s.S1();
        }

        public void ActionTwo()
        {
            //using (var scope = _serviceProvider.CreateScope())
            //{
            //    var bar = scope.ServiceProvider.GetService<IBar>();
            _bar.MethodTwo();
            //}

        }

    }
    class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("Hello RabbitMq!");

            {
                RabbitMqManagerHelp rabbitMqManagerHelp = new RabbitMqManagerHelp();
                for (int i = 0; i < 10; i++)
                {
                    Task.Run(()=> {
                        rabbitMqManagerHelp.CreateConnection();
                       
                    });
                }
                Thread.Sleep(30 * 1000);
                for (int i = 0; i < 10; i++)
                {
                    Task.Run(() =>
                    {
                        rabbitMqManagerHelp.CreateConnection();
                    });
                }
                Thread.Sleep(30 * 1000);
                for (int i = 0; i < 10; i++)
                {
                    Task.Run(() =>
                    {
                        rabbitMqManagerHelp.CreateConnection();
                    });
                }
                //Thread.Sleep(30 * 1000);
                Thread.Sleep(30 * 1000);
                rabbitMqManagerHelp.CreateModel();
                Console.ReadLine();
            }



            //{
            //    IServiceCollection services= new ServiceCollection(); ;
            //    services.AddSingleton<IPublisher, RabbitMQPublisher>();
            //    var service = services.BuildServiceProvider().GetService<IPublisher>();
            //    TestDi testDi = new TestDi(service);
            //    testDi.F1();
            //}
            //{

            //    IServiceCollection services = new ServiceCollection();
            //    services.AddScoped<IBar, Bar>();
            //    services.AddScoped<IS, S>();
            //    var service=services.BuildServiceProvider();
            //    var Bar = service.GetService<IBar>();
            //    var s = service.GetService<IS>();
            //    //Console.WriteLine(Bar);
            //    var controller = new MianController(Bar, s);
            //    controller.ActionOne();
            //    //controller.ActionTwo();

            //    Console.Read();
            //}

            //RabbitMq mq = new RabbitMq();

            ////mq.HelloWorldReceive("hello", (model, ea) =>
            ////{
            ////    var body = ea.Body.ToArray();
            ////    var message = Encoding.UTF8.GetString(body);
            ////    Console.WriteLine(" [x] Received {0}", message);
            ////});


            //for (int i = 0; i < 1000000; i++)
            //{
            //    mq.HelloWorldSend("hello", "hello world!");
            //}

            //mq.HelloWorldReceive("hello", (model, ea) =>
            //{
            //    var body = ea.Body.ToArray();
            //    var message = Encoding.UTF8.GetString(body);
            //    Console.WriteLine(" [x] Received {0}", message);
            //});

            //RabbitMq mq2 = new RabbitMq();
            //mq2.HelloWorldSend("hello", "hello world2!");
            //Console.ReadLine();
            {
                //RabbitMQProvider rabbitMQProvider = new RabbitMQProvider("localhost", 5672, "guest", "guest");
                //RabbitMQPublisher rabbitMQPublisher = new RabbitMQPublisher(rabbitMQProvider);
                //int count = 0;
                //List<Person> person = new List<Person>();
                //for (int i = 0; i < 1000; i++)
                //{
                //    person.Add(new Person { 
                //        Id = i,
                //    Name = $"肖志龙_{i}"
                //});
                //    //person.Id = i;
                //    //person.Name = $"肖志龙_{i}";
                //    //rabbitMQPublisher.Publish("jsonmsginfo", person);
                //    //Console.WriteLine(i);
                //    count++;
                //}
                //rabbitMQPublisher.Publish("jsonmsginfo", person);
                //Console.WriteLine(count);

                ////RabbitMQSubscriber rabbitMQSubscriber = new RabbitMQSubscriber(rabbitMQProvider);
                ////rabbitMQSubscriber.Subscribe("jsonmsginfo", "JsonQueueDemo1", msgBytes =>
                //// {
                ////     var result = MessageSerializerFactory.CreateMessageSerializerInstance().Deserialize<Person>(msgBytes);
                ////     Console.WriteLine(result);

                //// });

                //Console.ReadLine();

            }
            //{
            //    List<Account> lists = new List<Account>();
            //    for (int i = 0; i < 100; i++)
            //    {
            //        ulong j = (ulong)(i + 1);
            //        lists.Add(new Account
            //        {
            //            Id = j,
            //            Name = "肖志龙",
            //            Password = "1dfdf+++===sd3232xxddFFF"
            //        });
            //    }

            //    //Account account = new Account
            //    //{
            //    //    Id = 123,
            //    //    Name = "肖志龙",
            //    //    Password = "1dfdf+++===sd3232xxddFFF"
            //    //};
            //    //byte[] bytesssss=new byte[900];
            //    using (MemoryStream ms = new MemoryStream())
            //    {
            //        Serializer.Serialize<List<Account>>(ms, lists);
            //        var sss = ms.ToArray();
            //        Console.WriteLine(sss.Length);
            //        StringBuilder stringBuilder = new StringBuilder();
            //        foreach (var item in sss)
            //        {
            //            stringBuilder.Append(item);
            //        }
            //        Console.WriteLine(stringBuilder.ToString());
            //    }
            //    //using (MemoryStream ms = new MemoryStream(bytesssss))
            //    //{
            //    //    var result22222=Serializer.Deserialize<Account>(ms);

            //    //    Console.WriteLine(result22222.Password);
            //    //}
            //    var result = JsonConvert.SerializeObject(lists);
            //    var bytess = Encoding.UTF8.GetBytes(result);
            //    Console.WriteLine(bytess.Length);

            //    var result2 = Encoding.UTF8.GetString(bytess);

            //    Console.WriteLine(result2);
            //}

            //{
            //    var stringbytes
            //    var bytes = Encoding.UTF8.GetBytes(stringbytes);
            //    var strngsss = Encoding.UTF8.GetString(bytes);
            //    Console.WriteLine(strngsss);
            //}
        }
    }


    public interface IBar
    {
        void MethodOne();

        void MethodTwo();
    }
    public class Bar : IBar
    {
        public void MethodOne()
        {
            Console.WriteLine("MethOne....");
        }

        public void MethodTwo()
        {
            Console.WriteLine("MethTwo....");
        }
    }

    public interface IS
    {
        void S1();
    }

    public class S : IS
    {
        public void S1()
        {
            Console.WriteLine("HELLO S!!!");
        }
    }
    [ProtoContract]
    class Person
    {
        [ProtoMember(1)]
        public int Id { get; set; }
        [ProtoMember(2)]
        public string Name { get; set; }
    }
}
